function [cargs,copts] = pruning_args(varargin)

  [cargs,copts] = uber_args( ...
            'runs',    40, ...
            ...
            'ac.ct.ac.sigma', 12, ... %argidx(varargin,'ac.XferFn')
            'ac.ct.dataset',   'natimg', ...
            'ac.ct.steps',     {[8 8 8 8] [1 1 1 1]}, ...
            'ac.ct.npruning_loops', 4, ... %the rest of the loops in iters_per are training only,     {[6 5 4 3 1] [2 2 1 1 1]}, ...
            'ac.ct.iters_per',   {[10 10 10 10] [10 10 10 10]}, ...%'ac.ct.iters_per_step', [15 1], ...
            'ac.ct.ac.AvgError',  0, ...
            'ac.ct.ac.TrainMode', 'resilient', ...
            'ac.ct.ac.Pow',       1, ...
            'ac.ct.ac.EtaInitInit', 2E-2, ...%.4, ...
            'ac.ct.ac.Acc',       5E-5, ...
            'ac.ct.ac.Dec',       0.25, ...
            'ac.ct.ac.lambda',    0.025, ...
            'ac.ct.ac.prune_loc', 'input', ...
            'ac.ct.ac.prune_strategy', 'weights', ...
            'ac.ct.ac.nzc_ok', false, ... %non-zero connections ok
            'ac.ct.keep_weights', true, ...
            varargin{:} ...
           );

  % stolen
  cargs = { 'ac.ct.ac.XferFn',    argidx(cargs,'ac.XferFn'), ...
            'ac.ct.ac.zscore', argidx(cargs, 'ac.zscore'), ...
            'ac.ct.ac.wlim',      argidx(cargs,'ac.wlim'), ...
            'ac.ct.ac.WeightInitType', argidx(cargs,'ac.WeightInitType'), ...
            'ac.ct.ac.WeightInitScale', argidx(cargs,'ac.WeightInitScale'), ...
            'ac.ct.ac.noise_input', argidx(cargs,'ac.noise_input'), ...
             ...
             cargs{:} ...
           };



function idx = argidx(args,str)
  argidx = find(guru_findstr(args,str)==1,1,'last');
  if isempty(argidx), error('%s not found in arglist; must be present to push to pruning ac.', str); end;
  idx = args{argidx+1};
